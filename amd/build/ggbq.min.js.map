{"version":3,"file":"ggbq.min.js","sources":["../src/ggbq.js"],"sourcesContent":["/**\n * Javascript Controller to embed GGBApplet\n *\n * STUDENT VIEW\n *\n * This class provides all the functionality for the new assign module.\n *\n * @author         Christoph Stadlbauer <christoph.stadlbauer@geogebra.org>\n * @copyright  (c) International GeoGebra Institute 2018\n * @license        http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', '//www.geogebra.org/apps/deployggb.js'], function ($, GGBApplet) {\n    /**\n     * Created by Christoph on 25.08.19.\n     */\n\n    const scalingContainers = {};\n    let resizeTimeout;\n    /**\n     * Resizes the ggb scaling containers to make the ggb applet scale properly to fit into its container.\n     */\n    const resizeScalingContainer = () => {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = setTimeout(\n            () => Object.values(scalingContainers).forEach((containerClass) => {\n                    // We need to use getElementsByClassName because colons are not allowed for jquery and Vanilla JS querySelector.\n                    const scalingContainer = document.getElementsByClassName(containerClass)[0];\n                    // We retrieve the formulation div container, because this gives us the correct width to adapt\n                    // the scaling container to.\n                    const formulationDivStyle = window.getComputedStyle(\n                        scalingContainer.querySelector('.qtext').parentElement.parentElement);\n                    scalingContainer.style.width = parseInt(formulationDivStyle.width)\n                        - parseInt(formulationDivStyle.paddingLeft) - parseInt(formulationDivStyle.paddingRight) + 'px';\n                }), 250);\n    };\n\n    return {\n        b64input: [],\n        ggbBase64: [],\n        xmlinput: [],\n        ggbxml: [],\n        currentvals: [],\n        answerinput: [],\n        responsevars: [],\n        exerciseresultinput: [],\n        qdiv: [],\n        //parameters: {},\n        ggbDataset: [],\n        //applet1,\n\n        init: function (appletParametersID) {\n            window.GGBQ = this;\n            var ggbDataset = document.getElementById(appletParametersID).dataset;\n            var slot = ggbDataset.slot;\n            // Add current scaling container to the object store for being able to access it later on.\n            scalingContainers[slot] = ggbDataset.scalingcontainerclass;\n\n            window.ggbAppletOnLoad = function (ggbAppletId) {\n                if (ggbAppletId != -1) {\n                    document.querySelector('article').onkeydown = this.checkEnter;\n                    var id = ggbAppletId.substring(9);\n                    var ggbApplet = window[ggbAppletId];\n                    var curvals = JSON.parse(window.GGBQ.currentvals[id]);\n                    for (var label in curvals) {\n                        ggbApplet.setValue(label, curvals[label]);\n                    }\n\n                    // Set the initial size of the scaling containers so GeoGebra applet scale a first time correctly after loading.\n                    resizeScalingContainer();\n                    // Unregister old event listeners in case we have multiple GeoGebra questions on one page.\n                    // We only need one for the whole page.\n                    window.removeEventListener('resize', resizeScalingContainer);\n                    window.addEventListener('resize', resizeScalingContainer);\n\n                    window.GGBQ.b64input[id].val(ggbApplet.getBase64());\n                    window.GGBQ.xmlinput[id].val(ggbApplet.getXML());\n                    var numvars = ggbApplet.startExercise();\n                    for (var key in numvars) {\n                        window.GGBQ.qdiv[id].innerHTML =\n                            window.GGBQ.qdiv[id].innerHTML.replace(\"{\" + key + \"}\", numvars[key]);\n                    }\n                    window.GGBQ.qdiv[id].style.visibility = 'visible';\n\n                    if (window.GGBQ.answerinput[id].val() == '') {\n                        var responsestring = '';\n                        window.GGBQ.responsevars[id].forEach(function (responsevar) {\n                            if (ggbApplet.isDefined(responsevar)) {\n                                responsestring += ggbApplet.getValue(responsevar);\n                            } else {\n                                responsestring += 0;\n                            }\n                        });\n                        window.GGBQ.answerinput[id].val(responsestring);\n                    }\n                }\n            };\n\n            // jquery doesn't handle the colon : but later we expect a jquery optject, so ...\n            this.b64input[slot] = $(document.getElementById(ggbDataset.b64input));\n            this.ggbBase64[slot] = this.b64input[slot].val();\n\n            this.xmlinput[slot] = $(document.getElementById(ggbDataset.xmlinput));\n            this.ggbxml[slot] = this.xmlinput[slot].val();\n            this.qdiv[slot] = $(\"#q\" + (slot) + \" .qtext\")[0];\n\n            var parameters = JSON.parse(ggbDataset.parameters);\n            if (this.ggbBase64[slot] != '') {\n                parameters.ggbBase64 = this.ggbBase64[slot];\n            }\n\n            // Check if width and height have been manually set. The default would be \"no\", so we use the scaling container feature.\n            if ((!ggbDataset.width || ggbDataset.width === '0') && (!ggbDataset.height || ggbDataset.height === '0')) {\n                parameters.scaleContainerClass = scalingContainers[slot];\n                parameters.autoHeight = true;\n            } else {\n                // Width and height are specified in this case, so we use the given fixed width and height settings\n                // of the plugin instance. Form validation of the settings asserts that both width and height are being set.\n                parameters.width = ggbDataset.width;\n                parameters.height = ggbDataset.height;\n                // We need to use getElementsByClassName because colons are not allowed for jquery and Vanilla JS querySelector.\n                const scalingContainer = document.getElementsByClassName(scalingContainers[slot])[0];\n                // We should always find this container, just check to be extra safe.\n                if (scalingContainer) {\n                    // Width of the scaling container is being set after the applet has been loaded. So no need to specify it here.\n                    scalingContainer.style.overflowX = 'auto';\n                    scalingContainer.style.overflowY = 'hidden';\n                }\n            }\n\n            // parameters.currentvals = JSON.parse(ggbDataset.vars);\n            this.ggbDatasetVars = JSON.parse(ggbDataset.vars);\n            parameters.language = ggbDataset.lang;\n            parameters.moodle = \"takingQuiz\";\n            delete parameters.material_id;\n\n            parameters.id = 'ggbApplet' + slot;\n\n            var views = JSON.parse(ggbDataset.views);\n\n            var applet1 = new GGBApplet(parameters, views, ggbDataset.html5NoWebSimple);\n            // applet1.setHTML5Codebase(\"https://cdn.geogebra.org/apps/5.0.541.0/web3d\");\n            applet1.inject(ggbDataset.div, \"preferHTML5\");\n\n            $('#responseform').on('submit', this.getBase64andCheck);\n\n            $(document.getElementById(ggbDataset.div)).on('mouseleave', this.getBase64andCheck);\n\n            this.currentvals[slot] = ggbDataset.vars;\n            this.answerinput[slot] = $(document.getElementById(ggbDataset.answerinput));\n            this.exerciseresultinput[slot] = $(document.getElementById(ggbDataset.exerciseresultinput));\n            this.responsevars[slot] = JSON.parse(ggbDataset.responsevars);\n        },\n        checkEnter: function(e) {\n            e = e || event;\n            var txtArea = /textarea/i.test((e.target || e.srcElement).tagName);\n            return txtArea || (e.keyCode || e.which || e.charCode || 0) !== 13;\n        },\n\n\n        getBase64andCheck: function() {\n            for (var i = 0; i < window.GGBQ.answerinput.length; i++) {\n                var ggbApplet = window['ggbApplet' + i];\n                if (typeof ggbApplet !== \"undefined\") {\n                    window.GGBQ.b64input[i].val(ggbApplet.getBase64());\n                    window.GGBQ.xmlinput[i].val(ggbApplet.getXML());\n\n                    // Workaround, to set all randomized variables.\n                    for (const [key, value] of Object.entries(window.GGBQ.ggbDatasetVars)) {\n                        ggbApplet.evalCommand(`${key}=${value}`);\n                    }\n\n                    var responsestring = '';\n                    for (var j = 0; j < window.GGBQ.responsevars[i].length; j++) {\n                        if (ggbApplet.isDefined(window.GGBQ.responsevars[i][j])) {\n                            responsestring += ggbApplet.getValue(window.GGBQ.responsevars[i][j]);\n                        } else {\n                            responsestring += 0;\n                        }\n                    }\n\n                    window.GGBQ.answerinput[i].val(responsestring);\n                    window.GGBQ.exerciseresultinput[i].val(JSON.stringify(ggbApplet.getExerciseResult()));\n                }\n            }\n        },\n\n    };\n});\n"],"names":["define","$","GGBApplet","resizeTimeout","scalingContainers","resizeScalingContainer","clearTimeout","setTimeout","Object","values","forEach","containerClass","scalingContainer","document","getElementsByClassName","formulationDivStyle","window","getComputedStyle","querySelector","parentElement","style","width","parseInt","paddingLeft","paddingRight","b64input","ggbBase64","xmlinput","ggbxml","currentvals","answerinput","responsevars","exerciseresultinput","qdiv","ggbDataset","init","appletParametersID","GGBQ","this","getElementById","dataset","slot","scalingcontainerclass","ggbAppletOnLoad","ggbAppletId","onkeydown","checkEnter","id","substring","ggbApplet","curvals","JSON","parse","label","setValue","removeEventListener","addEventListener","val","getBase64","getXML","numvars","startExercise","key","innerHTML","replace","visibility","responsestring","responsevar","isDefined","getValue","parameters","height","overflowX","overflowY","scaleContainerClass","autoHeight","ggbDatasetVars","vars","language","lang","moodle","material_id","views","html5NoWebSimple","inject","div","on","getBase64andCheck","e","event","test","target","srcElement","tagName","keyCode","which","charCode","i","length","entries","value","evalCommand","j","stringify","getExerciseResult"],"mappings":"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"}