{"version":3,"file":"ggbq.min.js","sources":["../src/ggbq.js"],"sourcesContent":["/**\n * Javascript Controller to embed GGBApplet\n *\n * STUDENT VIEW\n *\n * This class provides all the functionality for the new assign module.\n *\n * @author         Christoph Stadlbauer <christoph.stadlbauer@geogebra.org>\n * @copyright  (c) International GeoGebra Institute 2018\n * @license        http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'https://www.geogebra.org/apps/deployggb.js'], function ($, GGBApplet) {\n    /**\n     * Created by Christoph on 25.08.19.\n     */\n\n    const scalingContainers = {};\n    let resizeTimeout;\n    /**\n     * Resizes the ggb scaling containers to make the ggb applet scale properly to fit into its container.\n     */\n    const resizeScalingContainer = () => {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = setTimeout(\n            () => Object.values(scalingContainers).forEach((containerClass) => {\n                    // We need to use getElementsByClassName because colons are not allowed for jquery and Vanilla JS querySelector.\n                    const scalingContainer = document.getElementsByClassName(containerClass)[0];\n                    // We retrieve the formulation div container, because this gives us the correct width to adapt\n                    // the scaling container to.\n                    const formulationDivStyle = window.getComputedStyle(\n                        scalingContainer.querySelector('.qtext').parentElement.parentElement);\n                    scalingContainer.style.width = parseInt(formulationDivStyle.width)\n                        - parseInt(formulationDivStyle.paddingLeft) - parseInt(formulationDivStyle.paddingRight) + 'px';\n                }), 250);\n    };\n\n    return {\n        b64input: [],\n        ggbBase64: [],\n        currentvals: [],\n        answerinput: [],\n        responsevars: [],\n        qdiv: [],\n        //parameters: {},\n        ggbDataset: [],\n        //applet1,\n\n        init: function (appletParametersID) {\n            window.GGBQ = this;\n            var ggbDataset = document.getElementById(appletParametersID).dataset;\n            var slot = ggbDataset.slot;\n            // Add current scaling container to the object store for being able to access it later on.\n            scalingContainers[slot] = ggbDataset.scalingcontainerclass;\n\n            window.ggbAppletOnLoad = function (ggbAppletId) {\n                if (ggbAppletId != -1) {\n                    document.querySelector('article').onkeydown = this.checkEnter;\n                    var id = ggbAppletId.substring(9);\n                    var ggbApplet = window[ggbAppletId];\n                    var curvals = JSON.parse(window.GGBQ.currentvals[id]);\n                    for (var label in curvals) {\n                        ggbApplet.setValue(label, curvals[label]);\n                    }\n\n                    // Set the initial size of the scaling containers so GeoGebra applet scale a first time correctly after loading.\n                    resizeScalingContainer();\n                    // Unregister old event listeners in case we have multiple GeoGebra questions on one page.\n                    // We only need one for the whole page.\n                    window.removeEventListener('resize', resizeScalingContainer);\n                    window.addEventListener('resize', resizeScalingContainer);\n\n                    window.GGBQ.b64input[id].val(ggbApplet.getBase64());\n\n                    window.GGBQ.qdiv[id].style.visibility = 'visible';\n                    if (window.GGBQ.answerinput[id].val() == '') {\n                        var responsestring = '';\n                        window.GGBQ.responsevars[id].forEach(function (responsevar) {\n                            if (ggbApplet.isDefined(responsevar)) {\n                                responsestring += ggbApplet.getValue(responsevar);\n                            } else {\n                                responsestring += 0;\n                            }\n                        });\n                        window.GGBQ.answerinput[id].val(responsestring);\n                    }\n                }\n            };\n\n            // jquery doesn't handle the colon : but later we expect a jquery optject, so ...\n            this.b64input[slot] = $(document.getElementById(ggbDataset.b64input));\n            this.ggbBase64[slot] = this.b64input[slot].val();\n\n            this.qdiv[slot] = $(\"#q\" + (slot) + \" .qtext\")[0];\n\n            var parameters = JSON.parse(ggbDataset.parameters);\n            if (this.ggbBase64[slot] != '') {\n                parameters.ggbBase64 = this.ggbBase64[slot];\n            }\n\n            // Check if width and height have been manually set. The default would be \"no\", so we use the scaling container feature.\n            if (!ggbDataset.forcedimensions || ggbDataset.forcedimensions === '0') {\n                parameters.scaleContainerClass = scalingContainers[slot];\n                parameters.autoHeight = true;\n            } else {\n                // Width and height are specified in this case, so we use the given fixed width and height settings\n                // of the plugin instance. Form validation of the settings asserts that both width and height are being set.\n                parameters.width = ggbDataset.width;\n                parameters.height = ggbDataset.height;\n                // We need to use getElementsByClassName because colons are not allowed for jquery and Vanilla JS querySelector.\n                const scalingContainer = document.getElementsByClassName(scalingContainers[slot])[0];\n                // We should always find this container, just check to be extra safe.\n                if (scalingContainer) {\n                    // Width of the scaling container is being set after the applet has been loaded. So no need to specify it here.\n                    scalingContainer.style.overflowX = 'auto';\n                    scalingContainer.style.overflowY = 'hidden';\n                }\n            }\n\n            // parameters.currentvals = JSON.parse(ggbDataset.vars);\n            this.ggbDatasetVars = JSON.parse(ggbDataset.vars);\n            parameters.language = ggbDataset.lang;\n            parameters.moodle = \"takingQuiz\";\n            delete parameters.material_id;\n\n            parameters.id = 'ggbApplet' + slot;\n\n            var views = JSON.parse(ggbDataset.views);\n\n            var applet1 = new GGBApplet(parameters, views, ggbDataset.html5NoWebSimple);\n            // applet1.setHTML5Codebase(\"https://cdn.geogebra.org/apps/5.0.541.0/web3d\");\n            applet1.inject(ggbDataset.div, \"preferHTML5\");\n\n            $('#responseform').on('submit', this.getBase64andCheck);\n\n            $(document.getElementById(ggbDataset.div)).on('mouseleave', this.getBase64andCheck);\n\n            this.currentvals[slot] = ggbDataset.vars;\n            this.answerinput[slot] = $(document.getElementById(ggbDataset.answerinput));\n            this.responsevars[slot] = JSON.parse(ggbDataset.responsevars);\n        },\n        checkEnter: function(e) {\n            e = e || event;\n            var txtArea = /textarea/i.test((e.target || e.srcElement).tagName);\n            return txtArea || (e.keyCode || e.which || e.charCode || 0) !== 13;\n        },\n\n\n        getBase64andCheck: function() {\n            for (var i = 0; i < window.GGBQ.answerinput.length; i++) {\n                var ggbApplet = window['ggbApplet' + i];\n                if (typeof ggbApplet !== \"undefined\") {\n                    window.GGBQ.b64input[i].val(ggbApplet.getBase64());\n\n                    // Workaround, to set all randomized variables.\n                    for (const [key, value] of Object.entries(window.GGBQ.ggbDatasetVars)) {\n                        ggbApplet.evalCommand(`${key}=${value}`);\n                    }\n\n                    var responsestring = '';\n                    for (var j = 0; j < window.GGBQ.responsevars[i].length; j++) {\n                        if (ggbApplet.isDefined(window.GGBQ.responsevars[i][j])) {\n                            responsestring += ggbApplet.getValue(window.GGBQ.responsevars[i][j]);\n                        } else {\n                            responsestring += 0;\n                        }\n                    }\n\n                    window.GGBQ.answerinput[i].val(responsestring);\n                }\n            }\n        },\n    };\n});\n"],"names":["define","$","GGBApplet","scalingContainers","resizeTimeout","resizeScalingContainer","clearTimeout","setTimeout","Object","values","forEach","containerClass","scalingContainer","document","getElementsByClassName","formulationDivStyle","window","getComputedStyle","querySelector","parentElement","style","width","parseInt","paddingLeft","paddingRight","b64input","ggbBase64","currentvals","answerinput","responsevars","qdiv","ggbDataset","init","appletParametersID","GGBQ","this","getElementById","dataset","slot","scalingcontainerclass","ggbAppletOnLoad","ggbAppletId","onkeydown","checkEnter","id","substring","ggbApplet","curvals","JSON","parse","label","setValue","removeEventListener","addEventListener","val","getBase64","visibility","responsestring","responsevar","isDefined","getValue","parameters","forcedimensions","height","overflowX","overflowY","scaleContainerClass","autoHeight","ggbDatasetVars","vars","language","lang","moodle","material_id","views","html5NoWebSimple","inject","div","on","getBase64andCheck","e","event","test","target","srcElement","tagName","keyCode","which","charCode","i","length","key","value","entries","evalCommand","j"],"mappings":"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"}