{"version":3,"file":"ggbq.min.js","sources":["../src/ggbq.js"],"sourcesContent":["/* eslint-disable */\r\n/* eslint-disable no-debugger */\r\n/*jslint devel: true */\r\n/*eslint linebreak-style:0 -- ['error', 'windows','unix']*/\r\n\r\n/**\r\n * Javascript Controller to embed GGBApplet\r\n *\r\n * StuDENT VIEW\r\n *\r\n * This class provides all the functionality for the new assign module.\r\n *\r\n * @author         Christoph Stadlbauer <christoph.stadlbauer@geogebra.org>\r\n * @copyright  (c) International GeoGebra Institute 2018\r\n * @license        http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n\r\n// alert(\"hello ggbq\");\r\n //debugger; // eslint-disable-line\r\n        //debugcode();\r\n        function stringfy(responsevars,ggbApplet){\r\n        //debugcode();\r\n          var responsestring = '';\r\n          responsevars.forEach(function (responsevar){\r\n           if (ggbApplet.isDefined(responsevar)){ \r\n            var value = ggbApplet.getValue(responsevar);\r\n            if (ggbApplet.getObjectType(responsevar)==\"boolean\"){value = (value ==  0 ?\"false\":\"true\");}\r\n            responsestring += responsevar+\":\"+value+'%'; //Twingsister to deal with multidigit\r\n           }\r\n          });\r\n          return responsestring.replace(/\\%$/,\"\"); // possibly cut the last % works better with explode\r\n         }\r\n//        function loadinit(appletParametersID) {\r\n//        debugcode();\r\n//            var ggbDataset = document.getElementById(appletParametersID).dataset;\r\n    // Twingsister\r\n//        function loadinit(appletParametersID) {\r\n//            var ggbDataset = document.getElementById(appletParametersID).dataset;\r\n    // Twingsister\r\n//var GGBAppletstr;\r\n//            if (ggbDataset.isurlggb) {\r\n//            \tGGBAppletstr = ggbDataset.urlggb;\r\n//            } else { GGBAppletstr = 'https://www.geogebra.org/apps/deployggb.js';}\r\n\r\n   // }\r\n//define(['jquery','https://www.geogebra.org/apps/deployggb.js'], function ($, GGBApplet) {\r\ndefine(['jquery'], function ($) {\r\n     // Created by Christoph on 25.08.19.\r\n\r\n    const scalingContainers = {};\r\n    let resizeTimeout;\r\n     // Resizes the ggb scaling containers to make the ggb applet scale properly to fit into its container.\r\n    const resizeScalingContainer = () => {\r\n        clearTimeout(resizeTimeout);\r\n        resizeTimeout = setTimeout(\r\n            () => Object.values(scalingContainers).forEach((containerClass) => {\r\n                    // We need to use getElementsByClassName because colons are not allowed for jquery and Vanilla JS querySelector.\r\n                    const scalingContainer = document.getElementsByClassName(containerClass)[0];\r\n                    // We retrieve the formulation div container, because this gives us the correct width to adapt\r\n                    // the scaling container to.\r\n                    const formulationDivStyle = window.getComputedStyle(\r\n                        scalingContainer.querySelector('.qtext').parentElement.parentElement);\r\n                    scalingContainer.style.width = parseInt(formulationDivStyle.width)\r\n                        - parseInt(formulationDivStyle.paddingLeft) - parseInt(formulationDivStyle.paddingRight) + 'px';\r\n                }), 250);\r\n    };\r\n    return {\r\n        b64input: [],\r\n        ggbBase64: [],\r\n        xmlinput: [],\r\n        ggbxml: [],\r\n        currentvals: [],\r\n        answerinput: [],\r\n        responsevars: [],\r\n        exerciseresultinput: [],\r\n        qdiv: [],\r\n        //parameters: {}, //before not global\r\n        ggbDataset: [],\r\n        //applet1,\r\n\r\n        init: function (appletParametersID) {\r\n            window.GGBQ = this;\r\n            //debugcode();\r\n            var ggbDataset = document.getElementById(appletParametersID).dataset;\r\n            var slot = ggbDataset.slot;\r\n            // Add current scaling container to the object store for being able to access it later on.\r\n            scalingContainers[slot] = ggbDataset.scalingcontainerclass;\r\n            //alert(\"no load\");\r\n\r\n            window.ggbAppletOnLoad = function (ggbAppletId) {\r\n                if (ggbAppletId != -1) {\r\n                    document.querySelector('article').onkeydown = this.checkEnter;\r\n                    var id = ggbAppletId.substring(9);\r\n                    var ggbApplet = window[ggbAppletId];\r\n                    var curvals = JSON.parse(window.GGBQ.currentvals[id]);\r\n                    for (var label in curvals) {\r\n                        ggbApplet.setValue(label, curvals[label]);\r\n                    }\r\n\r\n                    // Set the initial size of the scaling containers so GeoGebra applet scale a first time correctly after loading.\r\n                    resizeScalingContainer();\r\n                    // Unregister old event listeners in case we have multiple GeoGebra questions on one page.\r\n                    // We only need one for the whole page.\r\n                    window.removeEventListener('resize', resizeScalingContainer);\r\n                    window.addEventListener('resize', resizeScalingContainer);\r\n\r\n                    window.GGBQ.b64input[id].val(ggbApplet.getBase64());\r\n                    window.GGBQ.xmlinput[id].val(ggbApplet.getXML());\r\n \r\n                    //window.GGBQ.qdiv[id].style.visibility = 'visible';\r\n                    window.GGBQ.qdiv[id]= {style: {visibility : 'visible'}};\r\n                    if (window.GGBQ.answerinput[id].val() == '') {\r\n                        // Twingsister\r\n                        window.GGBQ.answerinput[id].val(stringfy(window.GGBQ.responsevars[id],ggbApplet));\r\n                        // Twingsister\r\n                    \t//alert(\"response one\");\r\n                //alert(\"gogod\");\r\n             \t//ggbApplet.setWidth(100);\r\n             \t//ggbApplet.setPerspective(\"GD\");\r\n                    }\r\n                }\r\n            };\r\n            \r\n            // jquery doesn't handle the colon : but later we expect a jquery optject, so ...\r\n            this.b64input[slot] = $(document.getElementById(ggbDataset.b64input));\r\n            this.ggbBase64[slot] = this.b64input[slot].val();\r\n\r\n            this.xmlinput[slot] = $(document.getElementById(ggbDataset.xmlinput));\r\n            this.ggbxml[slot] = this.xmlinput[slot].val();\r\n            this.qdiv[slot] = $(\"#q\" + (slot) + \" .qtext\")[0];\r\n\r\n            \r\n            var parameters = JSON.parse(ggbDataset.parameters);\r\n            //parameters = JSON.parse(ggbDataset.parameters);\r\n            if (this.ggbBase64[slot] != '') {\r\n                parameters.ggbBase64 = this.ggbBase64[slot];\r\n            }\r\n\r\n            // Check if seed have been manually set. The default would be \"no\"\r\n            //alert(\"entering the seed\");\r\n            \t//debugcode();\r\n            if (!ggbDataset.seeditornot || ggbDataset.seeditornot === '0') {\r\n            \tvar dice=Math.floor((Math.random() * 1000) + 1);\r\n            \t//alert(\"random copy with \"+dice.toString());\r\n            \t//debugcode();\r\n                parameters.randomSeed = dice ;\r\n            } else {\r\n                parameters.randomSeed = ggbDataset.seed;\r\n            } \r\n            //alert(\"Calling with random \"+parameters.randomSeed.toString());\r\n            if (!ggbDataset.forcedimensions || ggbDataset.forcedimensions === '0') {\r\n                parameters.scaleContainerClass = scalingContainers[slot];\r\n                parameters.autoHeight = true;\r\n            } else {\r\n                // Width and height are specified in this case, so we use the given fixed width and height settings\r\n                // of the plugin instance. Form validation of the settings asserts that both width and height are being set.\r\n                parameters.width = ggbDataset.width;\r\n                parameters.height = ggbDataset.height;\r\n                // We need to use getElementsByClassName because colons are not allowed for jquery and Vanilla JS querySelector.\r\n                const scalingContainer = document.getElementsByClassName(scalingContainers[slot])[0];\r\n                // We should always find this container, just check to be extra safe.\r\n                if (scalingContainer) {\r\n                    // Width of the scaling container is being set after the applet has been loaded. So no need to specify it here.\r\n                    scalingContainer.style.overflowX = 'auto';\r\n                    scalingContainer.style.overflowY = 'hidden';\r\n                }\r\n            }\r\n            // parameters.currentvals = JSON.parse(ggbDataset.vars);\r\n            this.ggbDatasetVars = JSON.parse(ggbDataset.vars);\r\n            parameters.language = ggbDataset.lang;\r\n            parameters.moodle = \"takingQuiz\";\r\n            delete parameters.material_id;\r\n\r\n            parameters.id = 'ggbApplet' + slot;\r\n\r\n            var views = JSON.parse(ggbDataset.views);\r\n            // Check if GGBApplet have been manually set.\r\n        debugcode(); //\r\n            \tvar GGBAppletname ;\r\n            \tvar codebase ;\r\n\r\n            if (!ggbDataset.isurlggb||ggbDataset.isurlggb === \"0\") {\r\n             GGBAppletname = 'https://www.geogebra.org/apps/deployggb.js';\r\n             codebase=\"\";\r\n            } else {\r\n                var parts=ggbDataset.urlggb.split(\",\");\r\n            \tvar root=parts[0];\r\n            \tvar appl=parts[1];\r\n            \tvar base=parts[2];\r\n            \tGGBAppletname = root+appl ;\r\n            \tcodebase = root+base;\r\n            }\r\n              //require.config({paths: {gb: GGBAppletname.slice(0,-3)}});\r\n              //require([\"gb\"], function(gb) {\r\n              //import GGBApplet from GGBAppletname;\r\n\r\n            require([GGBAppletname],function (App){//);\r\n            \tvar applet1 ;\r\n                //applet1 = new App(parameters, views, ggbDataset.html5NoWebSimple);\r\n                if(!parameters.showToolBar){\r\n                 parameters.showToolBar=true; \r\n                 parameters.customToolBar=\"40,0,1,41,42,50,38,6\";\r\n                }\r\n                // parameters.enableUndoRedo=false; //user controlled\r\n                //parameters.showResetIcon=false;// user defined\r\n                parameters.preventFocus=true;// get focus upon start\r\n                parameters.allowStyleBar=false;// style bar controls too much \r\n                parameters.transparentGraphics=false;// graphics and graphics 2 are transparent\r\n                parameters.playButton=false; //true not working?\r\n                parameters.autoHeight=false; // allow height computed automatically\r\n                parameters.allowUpscale=true; // let GGB upscale Applet\r\n                parameters.showFullscreenButton=true; // let GGB upscale Applet\r\n                applet1 = new App(parameters,ggbDataset.html5nowebsimple);\r\n                if (!(codebase===\"\")){applet1.setHTML5Codebase(codebase)};\r\n            \tapplet1.inject(ggbDataset.div, \"preferHTML5\");\r\n              });\r\n            //\tGGBApplet=\r\n            //       define([GGBAppletname], function (GGBobj) {return GGBobj;});\r\n            //alert(\"applet creation\");debugger;\r\n            //var applet1 = new GGBApplet(parameters, views, ggbDataset.html5NoWebSimple);\r\n            //NO applet1.setHTML5Codebase(\"https://cdn.geogebra.org/apps/5.0.541.0/web3d\");\r\n\r\n            $('#responseform').on('submit', this.getBase64andCheck);\r\n\r\n            $(document.getElementById(ggbDataset.div)).on('mouseleave', this.getBase64andCheck);\r\n\r\n            this.currentvals[slot] = ggbDataset.vars;\r\n            this.answerinput[slot] = $(document.getElementById(ggbDataset.answerinput));\r\n            this.exerciseresultinput[slot] = $(document.getElementById(ggbDataset.exerciseresultinput));\r\n            this.responsevars[slot] = JSON.parse(ggbDataset.responsevars);\r\n        },\r\n        checkEnter: function(e) {\r\n            e = e || event;\r\n            var txtArea = /textarea/i.test((e.target || e.srcElement).tagName);\r\n            return txtArea || (e.keyCode || e.which || e.charCode || 0) !== 13;\r\n        },\r\n    // Twingsister\r\n    // takes an an array of strings that are GGB variable names either numeric text or boolean and\r\n    // returns a percent % separated string of the values. If no value is present the variable is skipped\r\n\r\n\r\n        getBase64andCheck: function() {\r\n        debugcode();\r\n            for (var i = 0; i < window.GGBQ.answerinput.length; i++) {\r\n                var ggbApplet = window['ggbApplet' + i];\r\n                if (typeof ggbApplet !== \"undefined\") {\r\n                    window.GGBQ.b64input[i].val(ggbApplet.getBase64());\r\n                    window.GGBQ.xmlinput[i].val(ggbApplet.getXML());\r\n\r\n                    // Workaround, to set all randomized variables.\r\n                    for (const [key, value] of Object.entries(window.GGBQ.ggbDatasetVars)) {\r\n                        ggbApplet.evalCommand(`${key}=${value}`);\r\n                    }\r\n\r\n                    //var responsestring = '';\r\n                    //for (var j = 0; j < window.GGBQ.responsevars[i].length; j++) {\r\n                        //if (ggbApplet.isDefined(window.GGBQ.responsevars[i][j])) {\r\n                        // Twingsister\r\n                        window.GGBQ.answerinput[i].val(stringfy(window.GGBQ.responsevars[i],ggbApplet));\r\n                        // Twingsister\r\n                        //    responsestring += ggbApplet.getValue(window.GGBQ.responsevars[i][j])+'%'; // Twingsister:to add multi digit\r\n                        //} else {\r\n                        //    responsestring += 0;\r\n                        //}\r\n                    //}\r\n                    //window.GGBQ.answerinput[i].val(responsestring);\r\n                    //alert(\"response\");\r\n                }\r\n            }\r\n        },\r\n\r\n    };\r\n});\r\n//init(appletParametersID);\r\n//}\r\n"],"names":["stringfy","responsevars","ggbApplet","responsestring","forEach","responsevar","isDefined","value","getValue","getObjectType","replace","define","$","resizeTimeout","scalingContainers","resizeScalingContainer","clearTimeout","setTimeout","Object","values","containerClass","scalingContainer","document","getElementsByClassName","formulationDivStyle","window","getComputedStyle","querySelector","parentElement","style","width","parseInt","paddingLeft","paddingRight","b64input","ggbBase64","xmlinput","ggbxml","currentvals","answerinput","exerciseresultinput","qdiv","ggbDataset","init","appletParametersID","GGBQ","this","getElementById","dataset","slot","scalingcontainerclass","ggbAppletOnLoad","ggbAppletId","onkeydown","checkEnter","id","substring","curvals","JSON","parse","label","setValue","removeEventListener","addEventListener","val","getBase64","getXML","visibility","parameters","seeditornot","randomSeed","seed","dice","Math","floor","random","forcedimensions","height","overflowX","overflowY","scaleContainerClass","autoHeight","ggbDatasetVars","vars","language","lang","moodle","material_id","GGBAppletname","codebase","views","debugcode","isurlggb","parts","urlggb","split","root","appl","base","require","App","applet1","showToolBar","customToolBar","preventFocus","allowStyleBar","transparentGraphics","playButton","allowUpscale","showFullscreenButton","html5nowebsimple","setHTML5Codebase","inject","div","on","getBase64andCheck","e","event","test","target","srcElement","tagName","keyCode","which","charCode","i","length","entries","key","evalCommand"],"mappings":";;;;;;;;;;;miCAqBQ,SAASA,SAASC,aAAaC,eAEzBC,eAAiB,UACrBF,aAAaG,SAAQ,SAAUC,gBAC1BH,UAAUI,UAAUD,aAAa,KAChCE,MAAQL,UAAUM,SAASH,aACW,WAAtCH,UAAUO,cAAcJ,eAAyBE,MAAmB,GAAVA,MAAa,QAAQ,QACnFJ,gBAAkBE,YAAY,IAAIE,MAAM,QAGnCJ,eAAeO,QAAQ,MAAM,GACpC,CAeVC,6BAAO,CAAC,WAAW,SAAUC,OAIrBC,cADEC,kBAAoB,GAGpBC,uBAAyB,WAC3BC,aAAaH,eACbA,cAAgBI,YACZ,kBAAMC,OAAOC,OAAOL,mBAAmBV,SAAQ,SAACgB,oBAElCC,iBAAmBC,SAASC,uBAAuBH,gBAAgB,GAGnEI,oBAAsBC,OAAOC,iBAC/BL,iBAAiBM,cAAc,UAAUC,cAAcA,eAC3DP,iBAAiBQ,MAAMC,MAAQC,SAASP,oBAAoBM,OACtDC,SAASP,oBAAoBQ,aAAeD,SAASP,oBAAoBS,cAAgB,UAC/F,YAET,CACHC,SAAU,GACVC,UAAW,GACXC,SAAU,GACVC,OAAQ,GACRC,YAAa,GACbC,YAAa,GACbtC,aAAc,GACduC,oBAAqB,GACrBC,KAAM,GAENC,WAAY,GAGZC,KAAM,SAAUC,oBACZnB,OAAOoB,KAAOC,SAEVJ,WAAapB,SAASyB,eAAeH,oBAAoBI,QACzDC,KAAOP,WAAWO,KAEtBnC,kBAAkBmC,MAAQP,WAAWQ,sBAGrCzB,OAAO0B,gBAAkB,SAAUC,iBACX,GAAhBA,YAAmB,CACnB9B,SAASK,cAAc,WAAW0B,UAAYP,KAAKQ,eAC/CC,GAAKH,YAAYI,UAAU,GAC3BtD,UAAYuB,OAAO2B,aACnBK,QAAUC,KAAKC,MAAMlC,OAAOoB,KAAKP,YAAYiB,SAC5C,IAAIK,SAASH,QACdvD,UAAU2D,SAASD,MAAOH,QAAQG,QAItC7C,yBAGAU,OAAOqC,oBAAoB,SAAU/C,wBACrCU,OAAOsC,iBAAiB,SAAUhD,wBAElCU,OAAOoB,KAAKX,SAASqB,IAAIS,IAAI9D,UAAU+D,aACvCxC,OAAOoB,KAAKT,SAASmB,IAAIS,IAAI9D,UAAUgE,UAGvCzC,OAAOoB,KAAKJ,KAAKc,IAAK,CAAC1B,MAAO,CAACsC,WAAa,YACH,IAArC1C,OAAOoB,KAAKN,YAAYgB,IAAIS,OAE5BvC,OAAOoB,KAAKN,YAAYgB,IAAIS,IAAIhE,SAASyB,OAAOoB,KAAK5C,aAAasD,IAAIrD,mBAW7EgC,SAASe,MAAQrC,EAAEU,SAASyB,eAAeL,WAAWR,gBACtDC,UAAUc,MAAQH,KAAKZ,SAASe,MAAMe,WAEtC5B,SAASa,MAAQrC,EAAEU,SAASyB,eAAeL,WAAWN,gBACtDC,OAAOY,MAAQH,KAAKV,SAASa,MAAMe,WACnCvB,KAAKQ,MAAQrC,EAAE,KAAQqC,KAAQ,WAAW,OAG3CmB,WAAaV,KAAKC,MAAMjB,WAAW0B,eAEX,IAAxBtB,KAAKX,UAAUc,QACfmB,WAAWjC,UAAYW,KAAKX,UAAUc,OAMrCP,WAAW2B,aAA0C,MAA3B3B,WAAW2B,YAMtCD,WAAWE,WAAa5B,WAAW6B,SANwB,KAC1DC,KAAKC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAmB,GAG1CP,WAAWE,WAAaE,QAKvB9B,WAAWkC,iBAAkD,MAA/BlC,WAAWkC,gBAGvC,CAGHR,WAAWtC,MAAQY,WAAWZ,MAC9BsC,WAAWS,OAASnC,WAAWmC,WAEzBxD,iBAAmBC,SAASC,uBAAuBT,kBAAkBmC,OAAO,GAE9E5B,mBAEAA,iBAAiBQ,MAAMiD,UAAY,OACnCzD,iBAAiBQ,MAAMkD,UAAY,eAbvCX,WAAWY,oBAAsBlE,kBAAkBmC,MACnDmB,WAAWa,YAAa,OAgBvBC,eAAiBxB,KAAKC,MAAMjB,WAAWyC,MAC5Cf,WAAWgB,SAAW1C,WAAW2C,KACjCjB,WAAWkB,OAAS,oBACblB,WAAWmB,YAElBnB,WAAWb,GAAK,YAAcN,SAKzBuC,cACAC,SAJO/B,KAAKC,MAAMjB,WAAWgD,UAEtCC,YAISjD,WAAWkD,UAAkC,MAAxBlD,WAAWkD,SAG9B,KACCC,MAAMnD,WAAWoD,OAAOC,MAAM,KACjCC,KAAKH,MAAM,GACXI,KAAKJ,MAAM,GACXK,KAAKL,MAAM,GACfL,cAAgBQ,KAAKC,KACrBR,SAAWO,KAAKE,UARhBV,cAAgB,6CAChBC,SAAS,GAaVU,QAAQ,CAACX,gBAAe,SAAUY,SAC7BC,QAEGjC,WAAWkC,cACdlC,WAAWkC,aAAY,EACvBlC,WAAWmC,cAAc,wBAI1BnC,WAAWoC,cAAa,EACxBpC,WAAWqC,eAAc,EACzBrC,WAAWsC,qBAAoB,EAC/BtC,WAAWuC,YAAW,EACtBvC,WAAWa,YAAW,EACtBb,WAAWwC,cAAa,EACxBxC,WAAWyC,sBAAqB,EAChCR,QAAU,IAAID,IAAIhC,WAAW1B,WAAWoE,kBACvB,KAAXrB,UAAgBY,QAAQU,iBAAiBtB,UAClDY,QAAQW,OAAOtE,WAAWuE,IAAK,kBAQhCrG,EAAE,iBAAiBsG,GAAG,SAAUpE,KAAKqE,mBAErCvG,EAAEU,SAASyB,eAAeL,WAAWuE,MAAMC,GAAG,aAAcpE,KAAKqE,wBAE5D7E,YAAYW,MAAQP,WAAWyC,UAC/B5C,YAAYU,MAAQrC,EAAEU,SAASyB,eAAeL,WAAWH,mBACzDC,oBAAoBS,MAAQrC,EAAEU,SAASyB,eAAeL,WAAWF,2BACjEvC,aAAagD,MAAQS,KAAKC,MAAMjB,WAAWzC,eAEpDqD,WAAY,SAAS8D,UACjBA,EAAIA,GAAKC,MACK,YAAYC,MAAMF,EAAEG,QAAUH,EAAEI,YAAYC,UACM,MAA7CL,EAAEM,SAAWN,EAAEO,OAASP,EAAEQ,UAAY,IAO7DT,kBAAmB,WACnBxB,gBACS,IAAIkC,EAAI,EAAGA,EAAIpG,OAAOoB,KAAKN,YAAYuF,OAAQD,IAAK,KACjD3H,UAAYuB,OAAO,YAAcoG,WACZ,IAAd3H,UAA2B,CAClCuB,OAAOoB,KAAKX,SAAS2F,GAAG7D,IAAI9D,UAAU+D,aACtCxC,OAAOoB,KAAKT,SAASyF,GAAG7D,IAAI9D,UAAUgE,uCAGXhD,OAAO6G,QAAQtG,OAAOoB,KAAKqC,+CAAiB,8DAA3D8C,0BAAKzH,4BACbL,UAAU+H,sBAAeD,gBAAOzH,QAOhCkB,OAAOoB,KAAKN,YAAYsF,GAAG7D,IAAIhE,SAASyB,OAAOoB,KAAK5C,aAAa4H,GAAG3H,eAc3F"}